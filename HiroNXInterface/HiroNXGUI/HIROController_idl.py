# Python stubs generated by omniidl from HIROController.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"HIROController.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"HIROController.idl")


# interface CommonCommands
_0__GlobalIDL._d_CommonCommands = (omniORB.tcInternal.tv_objref, "IDL:CommonCommands:1.0", "CommonCommands")
omniORB.typeMapping["IDL:CommonCommands:1.0"] = _0__GlobalIDL._d_CommonCommands
_0__GlobalIDL.CommonCommands = omniORB.newEmptyClass()
class CommonCommands :
    _NP_RepositoryId = _0__GlobalIDL._d_CommonCommands[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # struct RETURN_ID
    _0__GlobalIDL.CommonCommands.RETURN_ID = omniORB.newEmptyClass()
    class RETURN_ID (omniORB.StructBase):
        _NP_RepositoryId = "IDL:CommonCommands/RETURN_ID:1.0"

        _NP_ClassName = "_GlobalIDL.CommonCommands.RETURN_ID"

        def __init__(self, id, comment):
            self.id = id
            self.comment = comment
    
    _d_RETURN_ID  = _0__GlobalIDL.CommonCommands._d_RETURN_ID = (omniORB.tcInternal.tv_struct, RETURN_ID, RETURN_ID._NP_RepositoryId, "RETURN_ID", "id", omniORB.tcInternal.tv_long, "comment", (omniORB.tcInternal.tv_string,0))
    _tc_RETURN_ID = omniORB.tcInternal.createTypeCode(_d_RETURN_ID)
    omniORB.registerType(RETURN_ID._NP_RepositoryId, _d_RETURN_ID, _tc_RETURN_ID)


_0__GlobalIDL.CommonCommands = CommonCommands
_0__GlobalIDL._tc_CommonCommands = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_CommonCommands)
omniORB.registerType(CommonCommands._NP_RepositoryId, _0__GlobalIDL._d_CommonCommands, _0__GlobalIDL._tc_CommonCommands)

# CommonCommands operations and attributes
CommonCommands._d_servoOFF = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)
CommonCommands._d_servoON = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)
CommonCommands._d_servoOFFArm = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)
CommonCommands._d_servoOFFHand = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)
CommonCommands._d_servoONArm = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)
CommonCommands._d_servoONHand = ((), (omniORB.typeMapping["IDL:CommonCommands/RETURN_ID:1.0"], ), None)

# CommonCommands object reference
class _objref_CommonCommands (CORBA.Object):
    _NP_RepositoryId = CommonCommands._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def servoOFF(self, *args):
        return _omnipy.invoke(self, "servoOFF", _0__GlobalIDL.CommonCommands._d_servoOFF, args)

    def servoON(self, *args):
        return _omnipy.invoke(self, "servoON", _0__GlobalIDL.CommonCommands._d_servoON, args)

    def servoOFFArm(self, *args):
        return _omnipy.invoke(self, "servoOFFArm", _0__GlobalIDL.CommonCommands._d_servoOFFArm, args)

    def servoOFFHand(self, *args):
        return _omnipy.invoke(self, "servoOFFHand", _0__GlobalIDL.CommonCommands._d_servoOFFHand, args)

    def servoONArm(self, *args):
        return _omnipy.invoke(self, "servoONArm", _0__GlobalIDL.CommonCommands._d_servoONArm, args)

    def servoONHand(self, *args):
        return _omnipy.invoke(self, "servoONHand", _0__GlobalIDL.CommonCommands._d_servoONHand, args)

    __methods__ = ["servoOFF", "servoON", "servoOFFArm", "servoOFFHand", "servoONArm", "servoONHand"] + CORBA.Object.__methods__

omniORB.registerObjref(CommonCommands._NP_RepositoryId, _objref_CommonCommands)
_0__GlobalIDL._objref_CommonCommands = _objref_CommonCommands
del CommonCommands, _objref_CommonCommands

# CommonCommands skeleton
__name__ = "_GlobalIDL__POA"
class CommonCommands (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.CommonCommands._NP_RepositoryId


    _omni_op_d = {"servoOFF": _0__GlobalIDL.CommonCommands._d_servoOFF, "servoON": _0__GlobalIDL.CommonCommands._d_servoON, "servoOFFArm": _0__GlobalIDL.CommonCommands._d_servoOFFArm, "servoOFFHand": _0__GlobalIDL.CommonCommands._d_servoOFFHand, "servoONArm": _0__GlobalIDL.CommonCommands._d_servoONArm, "servoONHand": _0__GlobalIDL.CommonCommands._d_servoONHand}

CommonCommands._omni_skeleton = CommonCommands
_0__GlobalIDL__POA.CommonCommands = CommonCommands
omniORB.registerSkeleton(CommonCommands._NP_RepositoryId, CommonCommands)
del CommonCommands
__name__ = "_GlobalIDL"

# interface MotionCommands
_0__GlobalIDL._d_MotionCommands = (omniORB.tcInternal.tv_objref, "IDL:MotionCommands:1.0", "MotionCommands")
omniORB.typeMapping["IDL:MotionCommands:1.0"] = _0__GlobalIDL._d_MotionCommands
_0__GlobalIDL.MotionCommands = omniORB.newEmptyClass()
class MotionCommands :
    _NP_RepositoryId = _0__GlobalIDL._d_MotionCommands[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... HgMatrix
    class HgMatrix:
        _NP_RepositoryId = "IDL:MotionCommands/HgMatrix:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_HgMatrix  = (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 4), 3)
    _ad_HgMatrix = (omniORB.tcInternal.tv_alias, HgMatrix._NP_RepositoryId, "HgMatrix", (omniORB.tcInternal.tv_array, (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 4), 3))
    _tc_HgMatrix = omniORB.tcInternal.createTypeCode(_ad_HgMatrix)
    omniORB.registerType(HgMatrix._NP_RepositoryId, _ad_HgMatrix, _tc_HgMatrix)
    
    # typedef ... DoubleSeq
    class DoubleSeq:
        _NP_RepositoryId = "IDL:MotionCommands/DoubleSeq:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DoubleSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
    _ad_DoubleSeq = (omniORB.tcInternal.tv_alias, DoubleSeq._NP_RepositoryId, "DoubleSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
    _tc_DoubleSeq = omniORB.tcInternal.createTypeCode(_ad_DoubleSeq)
    omniORB.registerType(DoubleSeq._NP_RepositoryId, _ad_DoubleSeq, _tc_DoubleSeq)
    
    # typedef ... JointPos
    class JointPos:
        _NP_RepositoryId = "IDL:MotionCommands/JointPos:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_JointPos  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
    _ad_JointPos = (omniORB.tcInternal.tv_alias, JointPos._NP_RepositoryId, "JointPos", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
    _tc_JointPos = omniORB.tcInternal.createTypeCode(_ad_JointPos)
    omniORB.registerType(JointPos._NP_RepositoryId, _ad_JointPos, _tc_JointPos)
    
    # typedef ... JointPosSeq
    class JointPosSeq:
        _NP_RepositoryId = "IDL:MotionCommands/JointPosSeq:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_JointPosSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:MotionCommands/JointPos:1.0"], 0)
    _ad_JointPosSeq = (omniORB.tcInternal.tv_alias, JointPosSeq._NP_RepositoryId, "JointPosSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:MotionCommands/JointPos:1.0"], 0))
    _tc_JointPosSeq = omniORB.tcInternal.createTypeCode(_ad_JointPosSeq)
    omniORB.registerType(JointPosSeq._NP_RepositoryId, _ad_JointPosSeq, _tc_JointPosSeq)
    
    # typedef ... ULONG
    class ULONG:
        _NP_RepositoryId = "IDL:MotionCommands/ULONG:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_ULONG  = omniORB.tcInternal.tv_ulong
    _ad_ULONG = (omniORB.tcInternal.tv_alias, ULONG._NP_RepositoryId, "ULONG", omniORB.tcInternal.tv_ulong)
    _tc_ULONG = omniORB.tcInternal.createTypeCode(_ad_ULONG)
    omniORB.registerType(ULONG._NP_RepositoryId, _ad_ULONG, _tc_ULONG)
    
    # struct CarPosWithElbow
    _0__GlobalIDL.MotionCommands.CarPosWithElbow = omniORB.newEmptyClass()
    class CarPosWithElbow (omniORB.StructBase):
        _NP_RepositoryId = "IDL:MotionCommands/CarPosWithElbow:1.0"

        _NP_ClassName = "_GlobalIDL.MotionCommands.CarPosWithElbow"

        def __init__(self, carPos, elbow, structFlag):
            self.carPos = carPos
            self.elbow = elbow
            self.structFlag = structFlag
    
    _d_CarPosWithElbow  = _0__GlobalIDL.MotionCommands._d_CarPosWithElbow = (omniORB.tcInternal.tv_struct, CarPosWithElbow, CarPosWithElbow._NP_RepositoryId, "CarPosWithElbow", "carPos", omniORB.typeMapping["IDL:MotionCommands/HgMatrix:1.0"], "elbow", omniORB.tcInternal.tv_double, "structFlag", omniORB.typeMapping["IDL:MotionCommands/ULONG:1.0"])
    _tc_CarPosWithElbow = omniORB.tcInternal.createTypeCode(_d_CarPosWithElbow)
    omniORB.registerType(CarPosWithElbow._NP_RepositoryId, _d_CarPosWithElbow, _tc_CarPosWithElbow)
    
    # struct RETURN_ID
    _0__GlobalIDL.MotionCommands.RETURN_ID = omniORB.newEmptyClass()
    class RETURN_ID (omniORB.StructBase):
        _NP_RepositoryId = "IDL:MotionCommands/RETURN_ID:1.0"

        _NP_ClassName = "_GlobalIDL.MotionCommands.RETURN_ID"

        def __init__(self, id, comment):
            self.id = id
            self.comment = comment
    
    _d_RETURN_ID  = _0__GlobalIDL.MotionCommands._d_RETURN_ID = (omniORB.tcInternal.tv_struct, RETURN_ID, RETURN_ID._NP_RepositoryId, "RETURN_ID", "id", omniORB.tcInternal.tv_long, "comment", (omniORB.tcInternal.tv_string,0))
    _tc_RETURN_ID = omniORB.tcInternal.createTypeCode(_d_RETURN_ID)
    omniORB.registerType(RETURN_ID._NP_RepositoryId, _d_RETURN_ID, _tc_RETURN_ID)


_0__GlobalIDL.MotionCommands = MotionCommands
_0__GlobalIDL._tc_MotionCommands = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_MotionCommands)
omniORB.registerType(MotionCommands._NP_RepositoryId, _0__GlobalIDL._d_MotionCommands, _0__GlobalIDL._tc_MotionCommands)

# MotionCommands operations and attributes
MotionCommands._d_closeGripper = ((), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_moveGripper = ((omniORB.typeMapping["IDL:MotionCommands/DoubleSeq:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_moveLinearCartesianAbs = ((omniORB.typeMapping["IDL:MotionCommands/CarPosWithElbow:1.0"], omniORB.typeMapping["IDL:MotionCommands/CarPosWithElbow:1.0"]), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_moveLinearCartesianRel = ((omniORB.typeMapping["IDL:MotionCommands/CarPosWithElbow:1.0"], omniORB.typeMapping["IDL:MotionCommands/CarPosWithElbow:1.0"]), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_movePTPJointAbs = ((omniORB.typeMapping["IDL:MotionCommands/JointPos:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_movePTPJointRel = ((omniORB.typeMapping["IDL:MotionCommands/JointPos:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_movePTPJointAbsSeq = ((omniORB.typeMapping["IDL:MotionCommands/JointPosSeq:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_openGripper = ((), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_setSpeedCartesian = ((omniORB.typeMapping["IDL:MotionCommands/ULONG:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)
MotionCommands._d_setSpeedJoint = ((omniORB.typeMapping["IDL:MotionCommands/ULONG:1.0"], ), (omniORB.typeMapping["IDL:MotionCommands/RETURN_ID:1.0"], ), None)

# MotionCommands object reference
class _objref_MotionCommands (CORBA.Object):
    _NP_RepositoryId = MotionCommands._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def closeGripper(self, *args):
        return _omnipy.invoke(self, "closeGripper", _0__GlobalIDL.MotionCommands._d_closeGripper, args)

    def moveGripper(self, *args):
        return _omnipy.invoke(self, "moveGripper", _0__GlobalIDL.MotionCommands._d_moveGripper, args)

    def moveLinearCartesianAbs(self, *args):
        return _omnipy.invoke(self, "moveLinearCartesianAbs", _0__GlobalIDL.MotionCommands._d_moveLinearCartesianAbs, args)

    def moveLinearCartesianRel(self, *args):
        return _omnipy.invoke(self, "moveLinearCartesianRel", _0__GlobalIDL.MotionCommands._d_moveLinearCartesianRel, args)

    def movePTPJointAbs(self, *args):
        return _omnipy.invoke(self, "movePTPJointAbs", _0__GlobalIDL.MotionCommands._d_movePTPJointAbs, args)

    def movePTPJointRel(self, *args):
        return _omnipy.invoke(self, "movePTPJointRel", _0__GlobalIDL.MotionCommands._d_movePTPJointRel, args)

    def movePTPJointAbsSeq(self, *args):
        return _omnipy.invoke(self, "movePTPJointAbsSeq", _0__GlobalIDL.MotionCommands._d_movePTPJointAbsSeq, args)

    def openGripper(self, *args):
        return _omnipy.invoke(self, "openGripper", _0__GlobalIDL.MotionCommands._d_openGripper, args)

    def setSpeedCartesian(self, *args):
        return _omnipy.invoke(self, "setSpeedCartesian", _0__GlobalIDL.MotionCommands._d_setSpeedCartesian, args)

    def setSpeedJoint(self, *args):
        return _omnipy.invoke(self, "setSpeedJoint", _0__GlobalIDL.MotionCommands._d_setSpeedJoint, args)

    __methods__ = ["closeGripper", "moveGripper", "moveLinearCartesianAbs", "moveLinearCartesianRel", "movePTPJointAbs", "movePTPJointRel", "movePTPJointAbsSeq", "openGripper", "setSpeedCartesian", "setSpeedJoint"] + CORBA.Object.__methods__

omniORB.registerObjref(MotionCommands._NP_RepositoryId, _objref_MotionCommands)
_0__GlobalIDL._objref_MotionCommands = _objref_MotionCommands
del MotionCommands, _objref_MotionCommands

# MotionCommands skeleton
__name__ = "_GlobalIDL__POA"
class MotionCommands (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.MotionCommands._NP_RepositoryId


    _omni_op_d = {"closeGripper": _0__GlobalIDL.MotionCommands._d_closeGripper, "moveGripper": _0__GlobalIDL.MotionCommands._d_moveGripper, "moveLinearCartesianAbs": _0__GlobalIDL.MotionCommands._d_moveLinearCartesianAbs, "moveLinearCartesianRel": _0__GlobalIDL.MotionCommands._d_moveLinearCartesianRel, "movePTPJointAbs": _0__GlobalIDL.MotionCommands._d_movePTPJointAbs, "movePTPJointRel": _0__GlobalIDL.MotionCommands._d_movePTPJointRel, "movePTPJointAbsSeq": _0__GlobalIDL.MotionCommands._d_movePTPJointAbsSeq, "openGripper": _0__GlobalIDL.MotionCommands._d_openGripper, "setSpeedCartesian": _0__GlobalIDL.MotionCommands._d_setSpeedCartesian, "setSpeedJoint": _0__GlobalIDL.MotionCommands._d_setSpeedJoint}

MotionCommands._omni_skeleton = MotionCommands
_0__GlobalIDL__POA.MotionCommands = MotionCommands
omniORB.registerSkeleton(MotionCommands._NP_RepositoryId, MotionCommands)
del MotionCommands
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "HIROController_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
